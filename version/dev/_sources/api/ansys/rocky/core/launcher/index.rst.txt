:py:mod:`ansys.rocky.core.launcher`
===================================

.. py:module:: ansys.rocky.core.launcher

.. autoapi-nested-parse::

   Module that exposes functions to launch a Rocky application session.

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   ansys.rocky.core.launcher.launch_rocky



.. py:function:: launch_rocky(rocky_exe: Optional[Union[pathlib.Path, str]] = None, *, headless: bool = True, server_port: int = DEFAULT_SERVER_PORT, close_existing: bool = False) -> ansys.rocky.core.client.RockyClient

   
   Launch the Rocky executable with the PyRocky server enabled.

   This method waits for Rocky to start up and then returns a
   ```RockyClient`` instance.

   :Parameters:

       **rocky_exe** : :obj:`Optional`\[:obj:`Path`], :obj:`optional`
           Path to the Rocky executable. If a path is not specified, this method
           tries to find the path using ``AWP_ROOT*`` environment variables.

       **headless** : :ref:`bool <python:bltin-boolean-values>`, :obj:`optional`
           Whether to launch Rocky in headless mode. The default is ``True``.

       **server_port: int, optional**
           Set the port for Rocky RPC server.

       **close_existing: bool, optional**
           Checks if a session exists under the given server_port and closes it
           before attempting to launch a new session.



   :Returns:

       :obj:`RockyClient`
           Rocky client instance connected to the launched Rocky app.











   ..
       !! processed by numpydoc !!

